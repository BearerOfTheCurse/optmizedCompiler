 need to do:

 READ n;
  IF n < 18 THEN
    WRITE 0;
  ELSE
    WRITE 1;
  END;


 nop?
 array 3,10
 record 20,21

 decision 3  有更好的方法吗？除了加nop
 loop 4



 add struct size;
 check whether the operand is an integer

奇怪bug
第一个example 为什么开40？ 是16倍数的要变成不是16倍数; 因为call main 会 -8，需要rsp 一直是16倍数
high-level code 中有些register 用的不一样(他用v3 我用v2) record.txt 语法对就行

type里的 variable 的 declare 顺序是否都是 name, array record(name 一定在array 和 record 之前)? no
有传地址的情况吗？（比如record 里的array） no
怎么把label 和 instruction 联系起来？ instruction sequence: define label


  constant expression in divide zero; need to record const value in symbole table ? what about expression?
  Can symbols with array type which is the same(same size, same data type) point to one single array type object?(Same question for record) both OK
  connect AST node to symbol table(and why it is needed?)
  array[char] and size (convert char to ASCII
  nested record?

PROGRAM add;

TYPE Person = RECORD
    name: ARRAY 10 OF CHAR;
    sex: CHAR;
   age: INTEGER;
END;
--VAR p: INTEGER;

-- VAR p: Person;

VAR i,h : INTEGER;

 -- CONST one = (5 MOD (3-1));

CONST two= 2;
--VAR months: ARRAY 12 OF INTEGER;
-- VAR people: ARRAY 12 OF RECORD 
   -- name: ARRAY 10 OF CHAR;
  -- age: INTEGER;
-- END;

-- VAR people: RECORD  
 --   age: INTEGER;
-- END;

BEGIN
--p:=1;
END.




declaration 
  :TOK_CONST constdefn_list {$$ = node_build0(AST_DECLARATIONS); extractChild($2,$$)}
  |TOK_VAR vardefn_list {}
  |TOK_TYPE typedefn_list{}


vardefn_list 
  :vardefn vardefn_list {}
  | /* epsilon */
  ;

vardefn 
  :TOK_IDENT identifier_list TOK_COLON type TOK_SEMICOLON {}
  ;
  


typedefn
  :TOK_IDENT TOK_EQUALS type TOK_SEMICOLON {}
  ;

type
  :TOK_IDENT {}
  |TOK_ARRAY expression TOK_OF type {}
  |TOK_RECORD vardefn vardefn_list TOK_END {}
  ;



designator
  : TOK_IDENT {}
  | designator TOK_LBRACKET expression_list TOK_RBRACKET {}   
  | designator TOK_DOT TOK_IDENT {}
  ;

expression_list
  : expression {}
  | expression TOK_COMMA expression_list {}
  ; 



opt_declarations 
  : declaration opt_declarations {$$ = node_build1(AST_DECLARATIONS,$1); extractChild($2,$$);}
  | /* epsilon */ {$$ = node_build0(AST_DECLARATIONS);}
  ;

opt_instructions 
  : instruction TOK_SEMICOLON opt_instructions {$$ = node_build1(AST_INSTRUCTIONS,$1); extractChild($3,$$);} 
  | /* epsilon */ {$$ = node_build0(AST_INSTRUCTIONS);}
  ;

declaration 
  :TOK_VAR {$$ = node_build0(AST_DECLARATIONS);}
  ;

expression
  : term { $$ = $1; }
  ;

term 
  : term TOK_PLUS factor {$$ = node_build2(AST_ADD,$1,$3);}
  | term TOK_MINUS factor {$$ = node_build2(AST_SUBTRACT,$1,$3);}
  | factor {$$ = $1;} 
  ;

factor
  : factor TOK_TIMES unary {$$ = node_build2(AST_MULTIPLY,$1,$3);}
  | factor TOK_DIV unary   {$$ = node_build2(AST_DIVIDE,$1,$3);}
  | factor TOK_MOD unary   {$$ = node_build2(AST_MODULUS,$1,$3);}
  | unary{$$ = $1;} 
  ;

unary
  : TOK_PLUS unary {$$ = node_build1(AST_NEGATE,$1); makeChild($1,$$);}
  | TOK_MINUS unary {$$ = node_build1(AST_NEGATE,$1); makeChild($1,$$);}
  | primary {$$ = $1;} 

primary
  : TOK_INT_LITERAL { $$ = node_build1(AST_INT_LITERAL,$1);}
  | designator {$$ = $1;}
  | TOK_LPAREN expression TOK_RPAREN {$$ = $2;} 
  ;

instruction
  : designator TOK_ASSIGN expression {$$ = node_build2(AST_ASSIGN,$1,$3);}
  ;

designator
  : TOK_IDENT {$$ = node_build1(AST_VAR_REF,$1);}
  ;
